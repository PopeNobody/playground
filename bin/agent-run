#!/usr/bin/perl
# vim: ts=2 sw=2 ft=perl
eval 'exec perl -x -wS $0 ${1+"$@"}'
  if 0;
our(@VERSION) = qw( 0 1 0 );
$|++;
use AnyEvent;
my ($agent)=Agent->new();
Agent->note("calling recv, then will exit");
$agent->{covar}->recv;
exit(0);
package Agent;
use common::sense;
use FindLib qw(AI::Util);
use Carp qw(verbose);
use autodie;
use AI::Config qw(get_api_mod get_api_ua);
use AI::Conv;
use AI::UI;
use AI::Util;
use AnyEvent::Socket;
use AnyEvent::Handle;
use AnyEvent::Log;
use AnyEvent;
use AE;
sub note {
  local(@_)=@_;
  chomp(@_);
  say STDERR "note: => $_" for @_;
};
sub handle_prompt($) {
  note "conv: $conv (@_)";
};
sub new() {
  my ($class,%self)=@_;
  my ($self)=\%self;
  note "info: created new instance";
#      $self{timer} = AnyEvent->timer(
#        after=>15-time%15,
#        interval=>15, cb=>sub { note(serdate); }
#      );
  $self{covar} //= AE::cv;
  $self{model} //= get_api_mod;
  $self{agent} //= do {
    my $agent=get_api_ua;
    die "Session not configured" unless defined($agent);
    $agent
  };
  $self{port} //= do {
    local(@_) = map { split } qx( id -u );
    ddx( "id returned: @_" );
    shift;
  };
  $self{port}+=1000 while $self{port}<4000;
  note "creating  tcp server\n";
  $self{serv} //= tcp_server $self{host}, $self{port}, sub {
    my ($fh, $host, $port) = @_;
    note("got connection: @_\n");
    syswrite($fh,"helo!\n");
    my $hand;
    my $num;
    my $toggle;
    $hand = new AnyEvent::Handle (
      fh=>$fh,
      on_read => sub {
        local(@_)=@_;
        note("read: @_");
        my ($linelen)=0;
        while(1) {
          $linelen=index($hand->{rbuf},"\n");
          note("linelen: $linelen");
          if($linelen<0){
            return;
          };
          $linelen++;
          my ($line)=substr($hand->{rbuf},0,$linelen,"");
          note("line: $line");
          if($self{lines}) {
            push(@{$self{text}},$line);
            note("line: $line");
            if(--$self{lines}){
              note("expect $self{lines} more");
            } else {
              note("/recv complete");
              handle_prompt(join("",@{$self{text}}));
            };
            next;
          } elsif ( $line =~ m{^\s*$} ) {
            # say nothing, act natural
            next;
          } elsif ( $line =~ m{^\s*/recv\s+(\d*[1-9]\d*)\s+lines\s*$} ) {
            if($self{lines}=$1){
              $self{text}=[];
              $hand->push_write("/send $self{lines} lines\n");
              next;
            };
          }
          $hand->push_write(join("",
              "invalid syntax.  Reject\n",
              "   ",qquote($line),"\n"
            ));
        }
      },
      on_error => sub {
        local(@_)=@_;
        note( map { "error: $_" } @_ );
      },
      on_eof => sub {
        local(@_)=@_;
        note( map { "eof $_" } @_ );
      },
    );
  };


  bless($self,$class);
};
sub url() {
  my ($self)=shift;
  my ($httpd)=$self->{httpd};
  "http://".($httpd->host).":".($httpd->port)."/";
};
