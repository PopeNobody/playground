#!/usr/bin/perl
# vim: ts=2 sw=2 ft=perl
eval 'exec perl -x -wS $0 ${1+"$@"}'
  if 0;
$|++;
use FindBin qw($Bin);
open(STDERR,"|cat >&2");
open(STDOUT,">&STDERR");
BEGIN {
  for(map { "$_" } $Bin) {
    s{/s?bin$}{};
    $FindBin::prefix="$_";
  };    
};
BEGIN {
  use lib $FindBin::prefix."/lib";
};
use common::sense;
use AI::Util;
use autodie;
use Snatcher;
our(@VERSION) = qw( 0 1 0 );
use Getopt::WonderBra;
use AI::Conv;
use AI::Config qw(get_api_mod);

die "Session not configured" unless defined(AI::Config::get_api_ua);

@ARGV = getopt("mdc:f:e",@ARGV);
my ($delete,$text,$mock) = 0;
my ($edit,$prompt_file,$conv) = ( 1 );
sub help {
  say "usage; $0 [ -f \$prompt_file ] [ -e ]";
  say "";
  say "   -c \$conv dir: this will be the conv directory";
  say "       the mail file will be called conv.jwrap";
  say "       ( this dir will be used until system is";
  say "         instructed to use a new one, or it disappars )";
  say "";
  say "   -f \$prompt_file: prompt from file \$prompt_file";
  say "      if file is not absolute, will be relative to";
  say "      conversation dir";
  say "";
  say "   -e edit first.  filename is still used, if provided";
  say "      this is a toggle, and defaults to on";
  say "";
  say "   -d unlink exisnting converstation";
};

sub version {
  say "@VERSION";
};
my $conv_dir;
while(($_=shift)ne'--'){
  if( $_ eq '-c') {
    $conv_dir=path(shift);
  } elsif( $_ eq '-f') {
    $prompt_file=path(shift);
  } elsif ( $_ eq '-d' ) {
    $delete=1;
  } elsif ( $_ eq '-e' ) {
    $edit=1-$edit;
  } elsif ( $_ eq '-m' ) {
    $mock=1;
    $edit=1;
  } else {
    die "bad arg: $_";
  };
};
sub edit($) {
  my ($file)=shift;
  ddx({file=>$file});
  system("exec >/dev/tty </dev/tty 2>&1; gvim -f  $file");
  die "editor returned error" if $?;
};
my ($conv_file)=path("etc/convs.lst")->touch;
my (@convs) = grep { -d } split(m{\n},$conv_file->slurp);
if(defined($conv_dir)){
  unshift(@convs,$conv_dir);
  $conv_dir->mkdir;
} elsif ( @convs ) {
  $conv_dir=path($convs[0]);
} else {
  my ($maker)=serial_maker("dat/test-gpt-%04d",9999,1);
  $conv_dir = path($maker->()->{fn});
};
unless($convs[0] eq $conv_dir){
  $conv_file->spew($conv_dir);
};

my $prompt_file = $conv_dir->child("prompt.txt");
my $conv = AI::Conv->new($conv_dir);
path("etc")->child("test-ai.conv")->spew("$conv_dir");

sub transact {
  my $res;
  if($mock){
    my ($res_file) = $conv->dir->child("response.txt");
    $res_file->spew("Edit this file into the mock respons")
      unless -e $res_file;
    edit($res_file);
    $res = $res_file->slurp;
    eex($res);
    sleep(5);
    $res = AI::Msg->new("assistant",get_api_mod."(mock)",$res);
    eex($res);
    sleep(5);
    $conv->add($res);
    eex($res);
  }else{
    if($conv->last->{role} ne "user") {
      $prompt_file=path($prompt_file) unless ref $prompt_file;
      if($edit) {
        edit($prompt_file);
      }
      $text=$prompt_file->slurp;
      $conv->add(AI::Msg->new("user","nobody",$text));
    };
    $res = $conv->transact();
  };
  return $res;
}
my $res;
do {
  $res = transact();
  if($res->{type} eq "text/plain"){
    if($edit) {
      edit($conv->file);
    } else {
      say $conv->file->slurp;
    };
  } else {
    my ($script)=$conv_dir->child(
      sprintf("ex.%04d.script",$conv->length));
    eex($res);
    eex($script);
    my $text=$res->{text};
    for($text){
      eex({text=>$_});
      unless(m{^#!/}) {
        s{^#!}{#!/usr/bin/env };
      };
      eex({text=>$_});
    };
    $script->spew($text);
    $script->chmod(0755);
    my ($capture)=$conv_dir->child(
          sprintf("ex.%04d.capture.log",$conv->length));
    unless($script->is_absolute){
      $script="./$script";
    };
    system("bin/capture -f $capture perl $script");
    if($edit) {
      edit($capture);  
    };
    my ($msg) = AI::Msg->new("system","output",$capture->slurp);
    $conv->add($msg);
    $res=transact();
  };
} while $res->{type} ne "text/plain";

