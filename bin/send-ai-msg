#!/usr/bin/perl
# vim: ts=2 sw=2 ft=perl
eval 'exec perl -x -wS $0 ${1+"$@"}'
  if 0;
$|++;
use FindBin qw($Dir);
use lib "$Dir/..:$Dir/../lib";
use common::sense; use autodie;
our(@VERSION) = qw( 0 1 0 );
use HTTP::Tiny; use IO::Socket; use JSON::PP;
use Carp; use AI::Util;
use Carp qw(verbose);
use Scalar::Util qw(reftype);
use Data::Dumper::Concise;
use AI::Msg;
use AI::Conv;

sub mk_msg($$); sub setup(); 
sub load_prompt($); sub mk_msg($$);
sub res(); sub req(); sub sysmsg();

setup();
our($tiny,@msgs);
my ($AI)=$ENV{API_HAND};

while(1) {
  my ($sysmsg);
  ($sysmsg)=mk_msg("system",path("etc/system-msg.md")->slurp);
  (@msgs)=($sysmsg);
  $DB::single=1;
	unless(defined($tiny)){
		$tiny=HTTP::Tiny->new();
	};
	our( $req, $res );
  $res=($tiny->request($req));
  say STDERR "got response: $res";
  die "Failed: $res->{status} $res->{reason}\n" unless $res->{success};
  say "Status: ", $res->{status};
  say "Reason: ", $res->{reason};
  my ($cont)=decode_json($res->{content});
  my (@choices)=@{$cont->{choices}};
  if(@choices==0) {
    die "no coices in response";
  } else {
#        @_=maybe_run_script($choices[0]->{content},$AI,$conv);
  };
};
sub setup() {
	if( defined($ENV{AI_PREFIX}) ){
		local(@_)=grep { s{^$ENV{AI_PREFIX}_API}{API} } keys %ENV;
		$ENV{$_}=$ENV{"$ENV{AI_PREFIX}_$_"} for @_;
	};
	for(grep { m{/_API_/} } keys %ENV) {
		delete $ENV{$_}; 
	};
}
sub load_prompt($) {
	my ($pfile,$prompt)=@_;
  if(defined($ENV{NO_EDIT})){
    ($prompt)=path("etc/prompt.txt")->slurp;
  } else {
    ($prompt)=join("",edit_prompt("etc/prompt.txt"));
  };
  return $prompt;
}
#    $cdir->child(sprintf("msg%04d-req.txt",$cidx++))->spew(pp($req));
sub mk_msg($$) {
  my ($role,$content)=@_;
  croak "no role" unless defined ($role);
  croak "no content" unless defined ($content);
  my(%msg);
  $msg{role}=$role;
  $msg{content}=text_wrap($content);
  return \%msg;
};
sub sysmessage() {
#    	unless($pconv->exists){
#    		$pconv->parent->mkdir;
#    		($sysm)=path("etc/system-msg.md");
#    		die "missing system message" unless $sysm->exists;
#    	};
};
close(STDOUT);
{
  package req;
  our($req)= {
    'method'=>'POST',
    'url' => "$ENV{API_URL}/chat/completions",
    headers=>{
      'content-type' => 'application/json',
      'authorization' => "Bearer $ENV{API_KEY}",
      'user-agent' => 'curl/7.88.1',
    },
  };
  bless($req,'req');
	our(%content) = (
		"model"=> "$ENV{API_MOD}",
		"temperature"=> 0.7,
	);
	sub http_req(@) {
		my(%cont)=%content;
		$cont{messages}=@_;
    my(@req)=
    ( $req->{method},
      $req->{url},
      { 
        content=>undef,
        headers=>$req->{headers}
      }
    );
#      $cdir->child(sprintf("msg%04d-res.txt",$cidx++))->spew(pp($res));
};
}
