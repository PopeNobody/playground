#!/usr/bin/perl 
use strict;
use warnings;
use common::sense;
$|++;
our(@VERSION)=qw( 0 1 0 );
use Nobody::Util;
use IO::File;
use IO::Pipe;
use IO::Select;
use Path::Tiny;
use Time::HiRes qw( sleep alarm );
use Getopt::WonderBra;
our(%cfg);
BEGIN {
  sub help {
    say "Usage: $0 [ -f logfile ] [ exec or script ]";
    say "";
    say "  accepts a script on stdin if process==-";
    say "  in this case, script must start with shebang line";
    say "";
    say "  -f [name] : use logfile name";
    say "  -q        : suppress output to fds 0,1,2";
    say "  -p        : pipe script to stdin";
    say "  -z        : resplit args.  usefur for shebang lines"
  }
  sub version {
    local($")=".";
    print "@VERSION";
  };
}
INIT {
  $cfg{mode}=">";
  $cfg{pipe}=0;
  my $script;
  if($ARGV[0] =~ m{^\s*-z}){
    $script=pop;
    $cfg{shebang}=1;
    @ARGV=map { split } "@ARGV";
  };
  unless(grep { $_ eq '--' } @ARGV){
    die "usage: capture [ args ] -- <cmd>";
  };
  @ARGV = getopt("zqf:p",@ARGV);
  while(($_=shift(@ARGV))ne'--'){
    if($_ eq '-f') {
      $cfg{logfile}=path(shift(@ARGV));
    } elsif ( $_ eq '-z' ) {
      # say nothing, act natural
    } elsif ( $_ eq '-p' ) {
      $_=!$_ for $cfg{pipe};
    } elsif ( $_ eq '-q' ) {
      open(STDIN,"</dev/null");
      open(STDOUT,">/dev/null");
      open(STDERR,">/dev/null");
    } else {
      die "unexpected $_";
    };
  };
  if($cfg{shebang}){
    if($cfg{pipe}){
      open(STDIN,"<$script");
      undef($script);
    } else {
      unshift(@ARGV,$script);
    }
  }
}
my (@argv);
our(@str);
BEGIN {
  sub buf() {
    my $buf="";
    return \$buf;
  };
  *main::str = [
    [*STDIN,       new IO::Pipe, buf(),'I'],
    [new IO::Pipe,      *STDOUT, buf(),'O'],
    [new IO::Pipe,      *STDERR, buf(),'E'],
  ];
};
unless(@ARGV) {
  die "no program or script to run";
};
my $old = umask 0077;
unless(defined($cfg{logfile})){
  for($cfg{logfile}="$ARGV[0]"){
    s{([.][^/.]*)?$}{.log};
    if($cfg{logfile}eq$ARGV[0]){
      # looks like script ended in .log, so double down
      $cfg{logfile}=$_="$_.log";
    };
    $_=path($_);
  };
};
$cfg{logfile}->parent->mkdir;;
open(my $log,$cfg{mode}, $cfg{logfile});
umask $old;
$log->say("C: ", grep { s{\s+}{ }g;1; } pp(\@ARGV));

my $dead=0;
my (%dat);
my (@key) = qw( r w b p );
sub like_path($){
  for($_[0]){
    return 0 unless defined;
    return m{^[-/a-zA-Z0-9_~]+$}?1:0;
  };
};
sub start_child() {
  my $pid=fork;
  return $pid if $pid;
  open($str[0][0],"<&".fileno($str[0][1]->reader));
  open($str[1][1],">&".fileno($str[1][0]->writer));
  open($str[2][1],">&".fileno($str[2][0]->writer));
  $!=0;
  exec(@ARGV);
  die "exec:@ARGV:$!";
}
my $ip;
sub decode {
  my ($pid)=shift;
  my ($full)=shift;
  my ($core)=$full&128;
  my ($res)=$full>>8;
  my ($sig)=$full&127;
  return "$pid exited: res=$res sig=$sig".($core ? " (core dumped)" : "");
};
sub main() {
  local($DB::inhibit_exit)=0;
  my $daddy=$$;
  my $pid=start_child;
  die "escaped! " unless $$==$daddy;
  my $exit;
  my $code;
  $SIG{CHLD}=sub { 
    my $kid=waitpid(0,0); 
    if($kid==$pid) {
      $dead=1; 
      $code = $?;
      open(STDIN,"</dev/null");
    } else {
      $log->say("W: $kid!=$pid");
    };
  };
  $log->say("W: pid=$pid");
  my $sel=IO::Select->new;
  for(@str) {
    local(*str)=$_;
    my ($dir) = ($str[3] eq 'I')?0:1;
    my ($call) = $dir ? "reader" : "writer";
    $str[1-$dir]->$call;
    $sel->add(\@str);
  };
  while(1) {
    my $n = scalar($sel->handles);
    last unless $n;
    my @r = $sel->can_read();
    unless(@r) {
      if($n==1 && $dead && !fileno([$sel->handles]->[0][0])){
        $log->say("N:  reopening STDIN from </dev/null");
        open(STDIN,"</dev/null");
      };
    }
    for my $a(@r) {
      my ($r, $w, $b, $t) = @$a;
      local(*_)=$b;
      $n=sysread($r,$_,1024,length);
      if($n) {
        my($c)=0;
        while((my $i=index($_,"\n"))>=0){
          my ($line)=substr($_,0,$i+1,"");
          $log->print("$t: ".pp($line));
          $w->print("$line");
          ++$c;
        };
      } else {
        if(defined($n)){
          warn "eof on ",fileno($r),"\n";
        } else {
          warn "error on fd: ",fileno($r),": $!\n";
        };
        if(length) {
          $log->print("$t".pp($_)."\n");
          print "$_<no-cr>\n";
        }
        $sel->remove($a);
        $sel->remove($r);
        close($w) if fileno($w) > 2;
        close($r);
      };
    };
  };
  $log->print("W: ",decode($pid,$code));
  exit($code);
}
main();
