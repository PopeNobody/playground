#!/usr/bin/perl
# vim: ts=2 sw=2 ft=perl
eval 'exec perl -x -wS $0 ${1+"$@"}'
  if 0;
$|++;
use lib "lib";
use common::sense;
use autodie;
use Nobody::Util;
use Path::Tiny;
use Getopt::WonderBra;
use lib 'lib';
use AI::Playground;

our(@VERSION) = qw( 0 1 0 );

# Parse command-line options
my %options = (
    port => $ENV{PORT} || $< || 4001,
    model => $ENV{API_MOD} || 'claude',
    debug => defined($ENV{DEBUG}) ? $ENV{DEBUG} : 1,
    secure_mode => $ENV{SECURE_MODE} || 0,
);

@ARGV = getopt("p:m:ds", @ARGV);
while (@ARGV && $ARGV[0] ne '--') {
    my $arg = shift @ARGV;
    if ($arg eq '-p') {
        $options{port} = shift @ARGV;
    } elsif ($arg eq '-m') {
        $options{model} = shift @ARGV;
    } elsif ($arg eq '-d') {
        $options{debug} = 1;
    } elsif ($arg eq '-s') {
        $options{secure_mode} = 1;
    } else {
        die "Unknown option: $arg\n";
    }
}

sub help {
    print <<HELP;
Usage: $0 [options]

Start the AI Playground server.

Options:
  -p PORT          Port to listen on (default: $options{port})
  -m MODEL         AI model to use (default: $options{model})
  -d               Enable debug output
  -s               Enable secure mode
  -h, --help       Show this help message
  -v, --version    Show version information

Environment variables:
  PORT             Port to listen on
  API_MOD          AI model to use
  DEBUG            Enable debug output
  SECURE_MODE      Enable secure mode
  API_KEY          API key for the selected model
HELP
    exit(0);
}

sub version {
    print "$0 version ", join('.', @VERSION), "\n";
    exit(0);
}

# Handle help and version flags
help() if grep { $_ eq '-h' || $_ eq '--help' } @ARGV;
version() if grep { $_ eq '-v' || $_ eq '--version' } @ARGV;

# Check for required environment variables
unless ($ENV{API_KEY} || $ENV{ANTHROPIC_API_KEY} || $ENV{OPENAI_API_KEY} || $ENV{GEMINI_API_KEY} || $ENV{XAI_API_KEY}) {
    die "API_KEY or model-specific API key environment variable must be set\n";
}

# Create and start the AI Playground server
my $playground = AI::Playground->new(
    port => $options{port},
    model => $options{model},
    debug => $options{debug},
    secure_mode => $options{secure_mode},
);

$playground->start();

# Keep the server running
AE::cv->recv;
