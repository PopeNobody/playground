#!/usr/bin/perl

eval 'exec perl -x -wS $0 ${1+"$@"}'
  if 0;
use lib "lib";
package g;
use AI::Util;
sub AI::Client;
package AI::Client;
BEGIN { 
  STDOUT->autoflush;
  STDERR->autoflush;
  $ENV{API_KEY}=$ENV{API_MOD}="";
};
use AI::Util ( path );
use AnyEvent ();
use AnyEvent::Handle ();
use AnyEvent::ReadLine::Gnu ();
use AnyEvent::Socket ( tcp_connect );
use autodie ();
use common::sense ();

our(@VERSION) = qw( 0 1 0 );
sub cmd_print {
  AI::Util::ddx(\@_);
  shift->{term}->print(@_);
};
sub cmd_note {
  AI::Util::ddx(\@_);
  shift->{term}->print(@_);
};
sub cmd_edit {
  my($self)=shift;
  my($file)=$self->{file};
  my($wbuf)=$self->{wbuf};
  $file->bak->spew($wbuf);
  system("$file >/dev/tty 2>&1 </dev/tty");
  if($?) {
    $file->rename($file->sav);
    $file->touch->spew($wbuf);
  } else {
    $wbuf=$file->slurp;
  };
}
sub send {
  my($self)=@_;
  my($file)=$self->{file};
  my($term)=$self->{term};
  my($text)=$file->slurp;
  rename($file,$file->sav);
  $text=length($text)."\n".$text."\n";

  tcp_connect "walrus", $port{$name}, sub {
    ($sock)=@_
      or die "failed to connect to $name";
    my($hand)=new AnyEvent::Handle(
      fh=>$sock,
      on_error=>sub {
        $self->{term}->print(error=>$_[2]);
        $_[0]->destroy;
      },
      on_eof=>sub {
        $hand->destroy;
        $self->response($text);
        $self->{term}->saw("done");
      }
    );
    $hand->push_write(length($text),"\n",$text);
    $hand->push_read(line=>sub {
        local($len)=shift;
        $hand->push_read(chunk => $len, sub {
            local($_)=shift;
            die "want $len have ",length unless $len==length;
            $self->response($len,$_);
            $file->sav->remove;
          }
        );
      }
    )
  }
};

sub quit {
  shift->{quit}->send;
}
sub trim {
  local($_)="@_";
  s{^\s*}{};
  s{\s*$}{};
  $_;
};
sub line {
  my ($self,$line)=@_;
  my ($sub);
  for($line) {
    unless(s{^\s*/\s*}{} and s{\s*$}{}) {
      $self->{wbuf} .= "$_\n";
      $self->{file}->spew(trim($self->{wbuf}));
      return;
    };
    if(defined($sub=$self->can($_))){
      $self->$sub($_);
    } else {
      $self->note("bad command: ($_)");
      return;
    };
  };
}
sub recv {
  shift->{quit}->recv;
};
package AI::Client::Impl;
our(@ISA)=qw(AI::Client);
use Path::Tiny;
use AI::Util;

sub new {
  my($class)=qw(AI::Client);;
  my($self)={@_};
  bless($self,$class);
  if(ref($class)){
    die "constructor called on client";
  };
  $self->{quit} = AE::cv;
  $self->{file} = path("prompt.txt");
  $self->{wbuf} = $self->{file}->slurp if $self->{file}->exists;
  $self->{term} = new AnyEvent::ReadLine::Gnu(
    prompt=>"MyFancyPrompt> ",
    on_line => sub {
      my ($line)=@_;
      $self->line($line);
    }
  );
  my $rl=$self->{term};
  bless($self,$class);
};
new()->recv;
