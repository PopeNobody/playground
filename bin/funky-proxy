#!/usr/bin/perl
use lib 'lib';
use common::sense;
use strict;
use warnings;
use HTTP::Daemon;
use AI::Util;
use LWP::UserAgent;
#    use HTTP::Proxy::HeaderFilter;
#    use HTTP::Proxy::BodyFilter;
#    use HTTP::Proxy::BodyFilter::simple;

# Config: Map of services to their API endpoints
my %services = (
    'grok'   => 'https://api.xai.com/v1',
    'gemini' => 'https://api.gemini.com/v1',
    'gpt'    => 'https://api.openai.com/v1',
    'claude' => 'https://api.anthropic.com/v1',
);

# Create proxy
sub sock_name_str($);
my $ua = LWP::UserAgent->new();
my $proxy = HTTP::Daemon->new(
  LocalAddr=>"10.10.10.1:4002",
  ReuseAddr=>1
);
die "socket:$!" unless defined $proxy;

sub sock_name_str($) {
  use Socket;
  my $sock=shift;
  my $addr=$sock->sockname();
  my ($port, $host) = sockaddr_in($addr);
  return join(":",inet_ntoa($host), $port);
};
say sock_name_str($proxy);
my ($ser,$c,$req,$res,$url,$path,$method);
while($c = $proxy->accept) {
  say "starting request";
  while($req = $c->get_request){
    $DB::single=1;
    my ($url)=$req->url;
    local($_)=join("",$url);
    my ($base,$rest)=m{^/([^/]+)/(.*)$};
    $base=$services{$base};
    $_=join("/",$base,$rest);
    if(defined($base)){
      $url=join("/",$base,$rest);
      $req->url($url);
      $req->remove_header("host");
      say "$_" for (
        "--------", 
        $req->as_string,
        "--------"
      );
      my $res = $ua->request($req);
      $DB::single=1;
      say "$_" for (
        "--------", 
        $res->as_string,
        "--------"
      );
      $c->send_response($res);      
    } else {
      $c->send_error(404,"no ai at: ".$req->url);
    };
    close($c);
  }
  say "request done";
};
