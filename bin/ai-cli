# Logging configuration
my $LOG_DIR = $ENV{LOG_DIR} // "ai_client_logs";
my $SECURE_MODE = $ENV{SECURE_MODE} // 0;

# Create log directory if it doesn't exist
path($LOG_DIR)->mkpath unless path($LOG_DIR)->exists;

# Function to save logs securely
sub save_log {
  my ($type, $content, $model, $is_error) = @_;
  return if $SECURE_MODE && !$ENV{LOG_IN_SECURE_MODE};
  
  # Create timestamp and filename using serdate
  my $date_str = serdate();
  my $log_dir = path("$LOG_DIR/$date_str");
  $log_dir->mkpath unless $log_dir->exists;
  
  my $filename = serdate(time()) . "-$model-$type";
  $filename .= "-error" if $is_error;
  my $log_file = path("$log_dir/$filename.log");
  
  # Redact sensitive information
  my $redacted = $content;
  $redacted =~ s/(api[-_]?key|token|authorization)(\s*[=:]\s*)[^\s&"']*/$1$2[REDACTED]/gi;
  $redacted =~ s/(Bearer|Basic)\s+[^\s"']*/$1 [REDACTED]/gi;
  
  # Save the log
  $log_file->spew($redacted);
  return $log_file;
}#!/usr/bin/perl
# vim: ts=2 sw=2 ft=perl
eval 'exec perl -x -wS $0 ${1+"$@"}'
  if 0;
$|++;
use common::sense;
use autodie;
use Nobody::Util;
use Path::Tiny;
use LWP::UserAgent;
use HTTP::Request;
use JSON;
use Getopt::Long;

our(@VERSION) = qw( 0 1 0 );

# Configuration - Use environment variables if available
my $SERVER_URL = $ENV{SERVER_URL} // "http://localhost:4001/ai_api";
my $API_KEY = $ENV{API_KEY} // "AI1_TOKEN";  # API key from environment
my $MODEL = $ENV{API_MOD} // "gpt-4o";       # Default model from environment
my $API_URL = $ENV{API_URL} // "https://api.openai.com/v1/chat/completions";
my $API_ORG = $ENV{API_ORG} // "";           # Fourth parameter (org ID)

# Command line options
my $input_file;
my $output_file;
my $model;
my $script_mode = 0;
my $help = 0;

GetOptions(
    "input|i=s"  => \$input_file,
    "output|o=s" => \$output_file,
    "model|m=s"  => \$model,
    "script|s"   => \$script_mode,
    "help|h"     => \$help
);

if ($help) {
    print <<HELP;
Usage: $0 [options] [message]

Options:
  -i, --input FILE    Read input from FILE instead of command line
  -o, --output FILE   Write output to FILE instead of stdout
  -m, --model MODEL   Use specified AI model (default: $MODEL)
  -s, --script        Input is a script to be executed directly
  -h, --help          Show this help message

Examples:
  $0 "Hello, how are you?"
  $0 -m gpt -i prompt.txt -o response.txt
  $0 -s -i script.py
HELP
    exit 0;
}

# Get the model from command line if specified
$MODEL = $model if defined $model;

# Get the input content
my $content;
if (defined $input_file) {
    $content = path($input_file)->slurp;
} else {
    # Join all remaining arguments as the message
    $content = join(" ", @ARGV);
    
    # If no arguments and not reading from a file, read from stdin
    if (!$content) {
        print "Enter your message (Ctrl+D to finish):\n";
        $content = do { local $/; <STDIN> };
    }
}

# Die if we still have no content
die "No input provided. Use -i FILE, provide message as arguments, or pipe to stdin.\n" 
    unless defined $content && $content =~ /\S/;

# Prepare the request
my $ua = LWP::UserAgent->new;
my $req = HTTP::Request->new(POST => $SERVER_URL);

$req->header('Content-Type' => 'application/json');
$req->header('Authorization' => "Bearer $API_KEY");

# Create the request payload
my $payload = {
    model => $MODEL,
};

if ($script_mode) {
    # If it's a script, ensure it has a shebang line
    if ($content !~ /^#!/m) {
        # Try to guess the interpreter
        if ($input_file && $input_file =~ /\.py$/) {
            $content = "#!/usr/bin/env python3\n" . $content;
        } elsif ($input_file && $input_file =~ /\.rb$/) {
            $content = "#!/usr/bin/env ruby\n" . $content;
        } elsif ($input_file && $input_file =~ /\.js$/) {
            $content = "#!/usr/bin/env node\n" . $content;
        } elsif ($input_file && $input_file =~ /\.pl$/) {
            $content = "#!/usr/bin/env perl\n" . $content;
        } else {
            # Default to Python
            $content = "#!/usr/bin/env python3\n" . $content;
        }
    }
    
    $payload->{message} = $content;
} else {
    # Regular message
    $payload->{message} = $content;
}

$req->content(encode_json($payload));

# Log the request without sensitive info
my $log_req = $req->clone;
$log_req->header('Authorization', 'Bearer [REDACTED]');
print STDERR "Sending request to: " . $log_req->uri . "\n" if $ENV{DEBUG};

# Log the request
save_log('request', $req->as_string, $MODEL);

# Send the request
my $res = $ua->request($req);

# Log the response
save_log('response', $res->as_string, $MODEL, !$res->is_success);

# Process the response
if ($res->is_success) {
    my $result = decode_json($res->decoded_content);
    
    # Format the output
    my $output = "";
    
    if (exists $result->{response}) {
        $output .= $result->{response};
    }
    
    if (exists $result->{results}) {
        $output .= "\n\n--- Script Execution Results ---\n";
        foreach my $script_result (@{$result->{results}}) {
            $output .= "Exit code: " . $script_result->{exit_code} . "\n";
            $output .= "Output:\n" . $script_result->{output} . "\n";
            $output .= "---\n";
        }
    }
    
    if (exists $result->{script_results}) {
        $output .= "\n\n--- AI Generated Script Results ---\n";
        foreach my $script_result (@{$result->{script_results}}) {
            $output .= "Exit code: " . $script_result->{exit_code} . "\n";
            $output .= "Output:\n" . $script_result->{output} . "\n";
            $output .= "---\n";
        }
    }
    
    # Output the result
    if (defined $output_file) {
        path($output_file)->spew($output);
        print "Response written to $output_file\n";
    } else {
        print $output;
    }
} else {
    die "Request failed: " . $res->status_line . "\n";
}
