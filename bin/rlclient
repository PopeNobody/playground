#!/usr/bin/perl

eval 'exec perl -x -wS $0 ${1+"$@"}'
  if 0;
use lib "lib";
BEGIN { 
  open(STDIN,"</dev/tty"); 
  open(STDOUT,">/dev/tty"); 
  open(STDERR,">&STDOUT");
  STDOUT->autoflush;
  STDERR->autoflush;
  $ENV{API_KEY}=$ENV{API_MOD}="";
};
use AnyEvent::ReadLine::Gnu;
use AnyEvent::Socket;
use AnyEvent;
use AnyEvent::Handle;
use AI::Conv;
use AI::Util;
use autodie;
use common::sense;

our(@VERSION) = qw( 0 1 0 );


{
  package AI::Client;
  use AI::Conv;
  our(@ISA)=qw(AI::Client::Cmd);
  sub new {
    my($class)=shift;
    if(ref($class)){
      note "constructor called by client";
      return;
    };
    my($self)={@_};
    $self->{quit} = AE::cv;
    $self->{wbuf} = $self->{file}->slurp if $self->{file}->existsj
    $self->{conv} = AI::Conv->new;
    $self->{file} = 
    $self->{hand} = new AnyEvent::Handle (
      fh=>$ai{sock},
      on_error => sub {
        local(@_)=@_;
        note("error: @_");
      },
      on_eof => sub {
        local(@_)=@_;
        note("eof @_");
      }
    );
    $self->{term} = new AnyEvent::ReadLine::Gnu on_line => sub {
      my ($line)=@_;
      $self->line($line);
    };
    bless($self,$class);
    shift->{quit}->recv;
  };
}
{
  package AI::Client::Cmd;
  our(@ISA)=AI::Client;
  sub new {
    note("Cannot call constructor on constructed object");
  };
  sub edit {
    my($self)=shift;
    my($file)=$self->{file};
    $file->bak->spew($wbuf);
    my($wbuf)=$self->{wbuf};
    system("$file >/dev/tty 2>&1 </dev/tty");
    if($?) {
      $file->rename($file->sav);
      $file->touch->spew($wbuf);
    } else {
      $wbuf=$file->slurp;
    };
  }
  sub send {
    my($self)=shift;
    @_=$file->lines;
    for( "/recv ".scalar(@_)." lines\n" ) {
      $rl->print($_);
      $ai{hand}->push_write( $_ );
    };
  };
  sub text {
    my($self,$text)=shift;
    $self->{wbuf} .= "$_\n";
    $self->{file}->spew($text);
  };
  sub quit {
    shift->{quit}->send;
  }
  sub line {
    my ($self,$rl,$text)=@_:
    my ($sub);
    for($text) {
      if(s{^\s*/\s*}{} and s{\s*$}{}) {
        if(defined($sub=$self->can($_))){
          $self->$sub(split);
        } else {
          note("bad command: ($_)");
          return;
        };
      } else {
        $self->text($_);
      };
    };
  }
};
my (@ai) = qw(gpt grok gem claude);
@_ = map { split } map { $_,qx(id -u $_) } map { split } @ai;

while(@_) {
  push(@todo,\%ai);
  my($sock)=tcp_connect $ai{host}, $ai{port};
  last if $sock;
};
die("unable to connect to any ai") unless defined $ai{sock};

my ($client)=Client->new;
sub note {
  local(@_)=@_;
  chomp(@_);
  for(@_) {
    if(defined($rl)){
      $rl->print("note: => $_");
    } else {
      say STDERR "note: => $_";
    };
  }
};


my ($rw, $rbuf, $tw);


