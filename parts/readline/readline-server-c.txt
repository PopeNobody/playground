#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <fcntl.h>
#include <signal.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <readline/readline.h>
#include <readline/history.h>
#include <json-c/json.h>

#define MAX_BUFFER_SIZE 16384
#define MAX_COMPLETION_ENTRIES 1000

/* Global variables */
static int server_socket = -1;
static int client_socket = -1;
static const char *socket_path = NULL;
static char *program_name = NULL;
static char **completion_matches = NULL;
static int num_completion_matches = 0;
static int use_completion = 0;

/* Signal handler for clean shutdown */
static volatile int running = 1;

/* Forward declarations */
static char *remote_completion_function(const char *text, int state);

/* Cleanup function */
void cleanup(void) {
    if (client_socket != -1) {
        close(client_socket);
    }
    
    if (server_socket != -1) {
        close(server_socket);
    }
    
    if (socket_path) {
        unlink(socket_path);
    }
    
    if (program_name) {
        free(program_name);
    }
    
    if (completion_matches) {
        for (int i = 0; i < num_completion_matches; i++) {
            if (completion_matches[i]) {
                free(completion_matches[i]);
            }
        }
        free(completion_matches);
    }
    
    /* Clean up readline */
    rl_cleanup_after_signal();
}

/* Signal handler */
void signal_handler(int sig) {
    running = 0;
    if (sig == SIGINT) {
        /* Pass SIGINT to readline */
        rl_free_line_state();
        rl_cleanup_after_signal();
        rl_callback_handler_remove();
        rl_forced_update_display();
    }
}

/* Initialize the completion matches array */
void init_completion_matches(void) {
    completion_matches = (char **)malloc(MAX_COMPLETION_ENTRIES * sizeof(char *));
    if (!completion_matches) {
        perror("malloc");
        exit(EXIT_FAILURE);
    }
    
    for (int i = 0; i < MAX_COMPLETION_ENTRIES; i++) {
        completion_matches[i] = NULL;
    }
    
    num_completion_matches = 0;
}

/* Clear current completion matches */
void clear_completion_matches(void) {
    if (!completion_matches) {
        return;
    }
    
    for (int i = 0; i < num_completion_matches; i++) {
        if (completion_matches[i]) {
            free(completion_matches[i]);
            completion_matches[i] = NULL;
        }
    }
    
    num_completion_matches = 0;
}

/* Set up completion function */
void setup_completion(void) {
    rl_attempted_completion_function = NULL;
    rl_completion_entry_function = remote_completion_function;
}

/* Remote completion function that uses matches from Perl */
static char *remote_completion_function(const char *text, int state) {
    if (!use_completion || !completion_matches) {
        return NULL;
    }
    
    /* If we're at state 0, send a message to get new completions */
    if (state == 0) {
        /* We already have matches from the Perl side */
        if (state < num_completion_matches && completion_matches[state]) {
            return strdup(completion_matches[state]);
        }
    } else if (state < num_completion_matches && completion_matches[state]) {
        return strdup(completion_matches[state]);
    }
    
    return NULL;
}

/* Parse and handle commands from client */
int handle_command(const char *json_str) {
    struct json_object *json;
    struct json_object *cmd_obj;
    const char *cmd;
    
    json = json_tokener_parse(json_str);
    if (!json) {
        fprintf(stderr, "Failed to parse JSON: %s\n", json_str);
        return -1;
    }
    
    if (!json_object_object_get_ex(json, "cmd", &cmd_obj)) {
        fprintf(stderr, "Missing 'cmd' field in JSON\n");
        json_object_put(json);
        return -1;
    }
    
    cmd = json_object_get_string(cmd_obj);
    
    if (strcmp(cmd, "init") == 0) {
        struct json_object *name_obj;
        
        if (json_object_object_get_ex(json, "name", &name_obj)) {
            const char *name = json_object_get_string(name_obj);
            if (program_name) {
                free(program_name);
            }
            program_name = strdup(name);
            rl_readline_name = program_name;
        }
        
        /* Initialize readline */
        rl_initialize();
        using_history();
        setup_completion();
        
        /* Respond with success */
        struct json_object *response = json_object_new_object();
        json_object_object_add(response, "status", json_object_new_string("ok"));
        
        const char *response_str = json_object_to_json_string(response);
        write(client_socket, response_str, strlen(response_str));
        write(client_socket, "\n", 1);
        
        json_object_put(response);
    }
    else if (strcmp(cmd, "readline") == 0) {
        struct json_object *prompt_obj;
        const char *prompt = "";
        
        if (json_object_object_get_ex(json, "prompt", &prompt_obj)) {
            prompt = json_object_get_string(prompt_obj);
        }
        
        /* Read a line using readline */
        char *line = readline(prompt);
        
        /* Create response */
        struct json_object *response = json_object_new_object();
        
        if (line) {
            json_object_object_add(response, "line", json_object_new_string(line));
            free(line);
        } else {
            json_object_object_add(response, "line", NULL);
        }
        
        const char *response_str = json_object_to_json_string(response);
        write(client_socket, response_str, strlen(response_str));
        write(client_socket, "\n", 1);
        
        json_object_put(response);
    }
    else if (strcmp(cmd, "addhistory") == 0) {
        struct json_object *line_obj;
        
        if (json_object_object_get_ex(json, "line", &line_obj)) {
            const char *line = json_object_get_string(line_obj);
            add_history(line);
        }
        
        /* Respond with success */
        struct json_object *response = json_object_new_object();
        json_object_object_add(response, "status", json_object_new_string("ok"));
        
        const char *response_str = json_object_to_json_string(response);
        write(client_socket, response_str, strlen(response_str));
        write(client_socket, "\n", 1);
        
        json_object_put(response);
    }
    else if (strcmp(cmd, "set_completion") == 0) {
        struct json_object *has_completion_obj;
        
        if (json_object_object_get_ex(json, "has_completion", &has_completion_obj)) {
            use_completion = json_object_get_boolean(has_completion_obj);
        }
        
        /* Respond with success */
        struct json_object *response = json_object_new_object();
        json_object_object_add(response, "status", json_object_new_string("ok"));
        
        const char *response_str = json_object_to_json_string(response);
        write(client_socket, response_str, strlen(response_str));
        write(client_socket, "\n", 1);
        
        json_object_put(response);
    }
    else if (strcmp(cmd, "set_matches") == 0) {
        struct json_object *matches_obj;
        
        clear_completion_matches();
        
        if (json_object_object_get_ex(json, "matches", &matches_obj) && 
            json_object_is_type(matches_obj, json_type_array)) {
            
            int len = json_object_array_length(matches_obj);
            if (len > MAX_COMPLETION_ENTRIES) {
                len = MAX_COMPLETION_ENTRIES;
            }
            
            for (int i = 0; i < len; i++) {
                struct json_object *match = json_object_array_get_idx(matches_obj, i);
                if (json_object_is_type(match, json_type_string)) {
                    const char *match_str = json_object_get_string(match);
                    completion_matches[i] = strdup(match_str);
                    num_completion_matches++;
                }
            }
        }
        
        /* Respond with success */
        struct json_object *response = json_object_new_object();
        json_object_object_add(response, "status", json_object_new_string("ok"));
        json_object_object_add(response, "count", json_object_new_int(num_completion_matches));
        
        const char *response_str = json_object_to_json_string(response);
        write(client_socket, response_str, strlen(response_str));
        write(client_socket, "\n", 1);
        
        json_object_put(response);
    }
    else if (strcmp(cmd, "ornaments") == 0) {
        /* Not fully implemented, just acknowledge */
        struct json_object *response = json_object_new_object();
        json_object_object_add(response, "status", json_object_new_string("ok"));
        
        const char *response_str = json_object_to_json_string(response);
        write(client_socket, response_str, strlen(response_str));
        write(client_socket, "\n", 1);
        
        json_object_put(response);
    }
    else if (strcmp(cmd, "exit") == 0) {
        /* Client requests exit */
        json_object_put(json);
        return 0;
    }
    else {
        fprintf(stderr, "Unknown command: %s\n", cmd);
    }
    
    json_object_put(json);
    return 1;
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <socket_path>\n", argv[0]);
        return EXIT_FAILURE;
    }
    
    socket_path = argv[1];
    
    /* Set up signal handlers */
    signal(SIGINT, signal_handler);
    signal(SIGTERM, signal_handler);
    atexit(cleanup);
    
    /* Remove any existing socket file */
    unlink(socket_path);
    
    /* Create server socket */
    server_socket = socket(AF_UNIX, SOCK_STREAM, 0);
    if (server_socket == -1) {
        perror("socket");
        return EXIT_FAILURE;
    }
    
    /* Set up server address */
    struct sockaddr_un addr;
    memset(&addr, 0, sizeof(addr));
    addr.sun_family = AF_UNIX;
    strncpy(addr.sun_path, socket_path, sizeof(addr.sun_path) - 1);
    
    /* Bind socket to address */
    if (bind(server_socket, (struct sockaddr*)&addr, sizeof(addr)) == -1) {
        perror("bind");
        return EXIT_FAILURE;
    }
    
    /* Listen for connections */
    if (listen(server_socket, 1) == -1) {
        perror("listen");
        return EXIT_FAILURE;
    }
    
    /* Initialize completion matches array */
    init_completion_matches();
    
    /* Accept a connection */
    struct sockaddr_un client_addr;
    socklen_t client_len = sizeof(client_addr);
    
    client_socket = accept(server_socket, (struct sockaddr*)&client_addr, &client_len);
    if (client_socket == -1) {
        perror("accept");
        return EXIT_FAILURE;
    }
    
    /* Set non-blocking mode */
    int flags = fcntl(client_socket, F_GETFL, 0);
    fcntl(client_socket, F_SETFL, flags | O_NONBLOCK);
    
    /* Main command loop */
    char buffer[MAX_BUFFER_SIZE];
    ssize_t bytes_read;
    
    while (running) {
        /* Read from client with timeout */
        fd_set read_fds;
        struct timeval tv;
        
        FD_ZERO(&read_fds);
        FD_SET(client_socket, &read_fds);
        
        /* 0.1 second timeout */
        tv.tv_sec = 0;
        tv.tv_usec = 100000;
        
        int ready = select(client_socket + 1, &read_fds, NULL, NULL, &tv);
        
        if (ready < 0 && errno != EINTR) {
            perror("select");
            break;
        }
        
        if (ready > 0 && FD_ISSET(client_socket, &read_fds)) {
            bytes_read = read(client_socket, buffer, MAX_BUFFER_SIZE - 1);
            
            if (bytes_read <= 0) {
                if (bytes_read < 0 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
                    /* No data available, continue */
                    continue;
                }
                /* Client disconnected or error */
                break;
            }
            
            /* Null terminate the buffer */
            buffer[bytes_read] = '\0';
            
            /* Process commands (may contain multiple newline-separated commands) */
            char *cmd = buffer;
            char *end;
            
            while ((end = strchr(cmd, '\n')) != NULL) {
                *end = '\0';
                
                /* Skip empty lines */
                if (strlen(cmd) > 0) {
                    if (handle_command(cmd) <= 0) {
                        running = 0;
                        break;
                    }
                }
                
                cmd = end + 1;
            }
        }
    }
    
    printf("Readline server shutting down\n");
    return EXIT_SUCCESS;
}
